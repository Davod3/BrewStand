openapi: 3.0.3
info:
  title: BrewStand
  description: |-
    This is the definition of the REST API for the BrewStand application. With this API users will be able to 
    create and obtain account tokens, view and compare beer types, as well as order beer in bulk from the
    available types
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: Item
    description: Supports operations related with viewing and buying batches of beer
  - name: User
    description: Supports operations related with account creation, authentication as well as cart and billing management
  - name: Order
    description: Supports operations related with the tracking of orders.
  - name: Billing
    description: Supports operations related with the viewing of invoices.
paths:
  /user/{userId}/cart:
    put:
      tags:
        - User
      summary: Adds an item to the user's cart.
      description: Adds an item with id provided in the request body to the cart belonging to the  user with user_id 
      security:
        - ApiKeyAuth: []
      operationId: user.addToCart
      requestBody:
        description: Item ID and respective volume to be added to the cart
        content:
          application/json:
            schema:
              type: object
              properties:
                batchID:
                  type: integer
                  format: int64
                  example: 10
                volume:
                  type: number
                  format: double
                  example: 38.5
      parameters:
        - name: userId
          in: path
          description: The ID of the user whose cart we want to access
          required: true
          schema:
            type: string
      responses:    
        '200':
          description: Successful operation. Item was added to the cart
        '400': 
          description: Invalid request body. Must include valid batch ID and volume
        '404': 
          description: User with the given userId was not found.
    get:
      tags:
        - User
      summary: Gets the items in the user's cart.
      description: Gets the contents of the cart belonging to the user with the given userId
      security:
        - ApiKeyAuth: []
      operationId: user.getCart
      parameters:
        - name: userId
          in: path
          description: The ID of the user whose cart we want to access
          required: true
          schema:
            type: string
      responses:    
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCart'
        '404': 
          description: User with the given userId was not found.
          
    delete:
      tags:
        - User
      summary: Deletes items from the user's cart.
      description: Deletes all items or a specific one if the id is specified.
      security:
        - ApiKeyAuth: []
      operationId: user.removeFromCart
      parameters:
        - name: userId
          in: path
          description: The ID of the user whose cart we want to access
          required: true
          schema:
            type: string
        - name: itemId
          in: query
          description: The id of the specific item we want to delete from the cart
          required: false
          schema:
            type: integer
            format: int64
      responses:    
        '200':
          description: Successful operation.
        '404': 
          description: User with the given userId was not found.
  /user/{userId}/cart/payment:
    post:
      tags:
        - User
      summary: Initiates the payment process for the items in a user's cart.
      description: Initiates the payment process for the items in a user's cart. If the payment succeeds the cart is cleared and an invoice containing tracking information for the order is returned.
      security:
        - ApiKeyAuth: []
      operationId: user.checkoutCart
      requestBody:
        description: Card details to complete the payment
        content:
            application/json:
              schema:
                type: object
                properties:
                  cardNumber:
                    type: string
                    example: '123456'
                  cardExpiry:
                    type: string
                    example: '05/24'
                  cardCvc:
                    type: string
                    example: '007'
      parameters:
        - name: userId
          in: path
          description: The ID of the user whose cart we want to access.
          required: true
          schema:
            type: string
      responses:
        '200': 
          description: Successful operation. Items in the cart are paid and an order created.
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Invoice'
        '404':
          description: User with the given userId was not found
        '500': 
          description: Something went wrong while processing the payment. Please try again later.
  /user:
    post:
      tags:
        - User
      summary: Adds a new user to the system.
      description: Creates a new user in the system with the given parameters.
      operationId: user.createUser
      requestBody:
        description: The details of the user to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful Operation. User was added with the resulting ID
          content:
            appication/json:
              schema:
                type: string
                example: "1234abcd345"
                description: Id of the created user
                
        '400':
          description: Invalid request body. Must include a valid username and address.
        '403':
          description: Username already exists. Please try again with a new username.
  /items/{itemId}:
    get:
      tags:
        - Item
      summary: Gets the details of a specific beer batch.
      description: Gets the details of a specific beer batch.
      operationId: item.getBatch
      parameters:
        - name: itemId
          in: path
          description: The ID of the batch whose details we want to view.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful Operation.
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Item'
        '404':
          description: Requested item was not found.
  /items:
    get:
      tags:
        - Item
      summary: Gets a list with all the beer batches or a comparison between two.
      description: Gets a list with the details of all the beer batches. Query parameters can be used to compare two different beer batches
      operationId: item.getBatches
      parameters:
        - name: item1
          in: query
          description: The ID of the first batch whose details we want to view.
          required: false
          schema:
            type: integer
            format: int64
        - name: item2
          in: query
          description: The ID of the second batch whose details we want to view.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful Operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Item'
        '404':
          description: One of the requested items was not found.
  /items/{itemId}/review:
    put:
      tags:
        - Item
      summary: Add a review to a specific beer batch.
      description: Add a review to a specific beer batch.
      security:
        - ApiKeyAuth: []
      operationId: item.updateReview
      parameters:
        - name: itemId
          in: path
          description: The ID of the batch whose details we want to view.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The review score to be attributed, from 0 to 10.
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
                  format: double
                  example: 7.8
                  description: The user attributed rating for the beer batch, from 0 to 10.
      responses:
        '200':
          description: Successful Operation. Review score was updated.
        '400':
          description: Invalid review score value. Must be between 0 and 10.
        '404':
          description: Requested item was not found.
  /order/{orderId}:
    get:
      tags:
        - Order
      summary: Gets the details related to a specific order.
      description: Gets details such as cost, status and delivary address for a given order.
      security:
        - ApiKeyAuth: []
      operationId: order.getOrder
      parameters:
        - name: orderId
          in: path
          description: The ID of the order whose details we want to view.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Order'
        '404':
          description: Requested order was not found.
  /order:
    get:
      tags:
        - Order
      summary: Gets all orders related to a user.
      description: Gets all orders related to a user.
      security:
        - ApiKeyAuth: []
      operationId: order.getOrders
      parameters:
        - name: userId
          in: query
          description: The id of the user whose orders we want to view
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Order'
            
        '404':
          description: Requested order was not found.
  /billing/{invoiceId}:
    get: 
      tags:
        - Billing
      summary: Gets the details of a specific invoice.
      description: Gets the details of a specific invoice.
      security:
        - ApiKeyAuth: []
      operationId: billing.getInvoice
      parameters:
        - name: invoiceId
          in: path
          description: The ID of the invoice whose details we want to view.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/Invoice'
        '404':
          description: Requested invoice was not found
  /billing:
    get: 
      tags:
        - Billing
      summary: Gets all invoices related to a user.
      description: Gets all invoices related to a user.
      security:
        - ApiKeyAuth: []
      operationId: billing.getInvoices
      parameters:
        - name: userId
          in: query
          description: The ID of the user whose invoices we want to see
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref : '#/components/schemas/Invoice'
        '404':
          description: Requested invoice was not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          example: 10
          description: The order id
        userId:
          type: string
          example: asd2a1da3qe1
          description: The id of the user associated with the order
        items:
          type: array
          items:
            type: object
            properties:
              itemID:
                type: integer
                format: int64
                example: 10
                description:  A unique identifier assigned to each batch of beer produced.
              volume:
                type: number
                format: double
                description: The volume of the item being acquired, in liters.
        shipDate:
          type: string
          format: date-time
          description: The date the order was sent to shipping
        status:
          type: string
          description: The status of the order
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
        destinationAddress:
          type: string
          example: Campo Grande 016, 1749-016 Lisboa
          description: The address to where the order will be sent.
    Item:
      type: object
      properties:
        batchID:
          type: integer
          format: int64
          example: 10
          description:  A unique identifier assigned to each batch of beer produced.
        beerStyle:
          type: string
          example: Wheat Beer
          description: The style or type of beer, such as IPA, Stout, Lager, Ale, etc.
        brewLocation:
          type: string
          example: Whitefield
          description: The city where the beer was originally brewed.
        userScore:
          type: number
          format: double
          example: 3.5
          description: A user defined score for the quality of the beer in the batch, rated out of 10.
        expertScore:
          type: number
          format: double
          example: 7.5
          description: An expert defined score for the quality of the beer in the batch, rated out of 10. 
        phLevel:
          type: number
          format: double
          example: 5.3
          description: The pH level of the beer, indicating its acidity or alkalinity.
        alchoolContent:
          type: number
          format: double
          example: 4.6
          description: The percentage of alcohol by volume in the beer.
        availableVolume:
          type: number
          format: double
          example: 5000
          description: The volume of beer available in the batch, measured in liters.
        brewDate:
          type: string
          format: date
          example: 2020-01-01
          description: The date on which the beer batch was brewed.
        cost:
          type: number
          format: double
          example: 3.5
          description: The price in euros per liter for this batch of beer.
    UserCart:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              itemID:
                type: integer
                format: int64
                example: 10
                description:  A unique identifier assigned to each batch of beer produced.
              volume:
                type: number
                format: double
                description: The volume of the item being acquired, in liters.
        totalCost:
          type: number
          format: double
          example: 35.55
          description: Total cost of the items in the cart in euros.
    Invoice:
      type: object
      properties:
        invoiceID:
          type: string
          example: 'ab10ef'
          description:  A unique identifier assigned to each invoice processed.
        price:
          type: number
          format: double
          example: 335.5
          description: The total cost for the order.
        orderID:
          type: string
          example: '4h7f'
          description: The order id. Used for tracking purposes.
        customerID:
          type: string
          example: '823hr'
          description: The id of the user who initiated the payment process.
        fiscalAddress:
          type: string
          example: Campo Grande 016, 1749-016 Lisboa
          description: The address used for billing purposes.
        details:
          type: string
          description: Optional details and extra notes about the order.
    User:
      type: object
      properties:
        username:
          type: string
          example: Jose123
          description: The username used to refer to the user. Must be unique
        password:
          type: string
          example: $ThisIsAPassword
          description: The password the user intends to use for authentication
        address:
          type: string
          example: Campo Grande 016, 1749-016 Lisboa
          description: The address to where orders will be sent.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      x-apikeyInfoFunc: app.apikey_auth
    