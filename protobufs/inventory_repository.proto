syntax = "proto3";

message GetBatchRequest {

    int64 batch_id = 1;

}

message BatchDetails {
    int32 batch_id = 1;
    string brew_date = 2;
    string beer_style = 3;
    string location = 4;
    float ph_level = 5;
    float alcohol_content = 6;
    float volume_produced = 7;
    float quality_score = 8;
    float cost = 9;
    float user_score = 10;
    int32 n_users_review = 11;
}

message GetBatchResponse {

    int32 response_code = 1;
    optional BatchDetails batch = 2;

    /*

    0 - Success
    1 - Batch not found

    */

}

message GetBatchCostRequest {

    int64 batch_id = 1;

}

message GetBatchCostResponse {

    int32 response_code = 1;
    optional double cost = 2;

    /*

    0 - Success
    1 - Batch not found

    */

}

message GetBatchScoreRequest {

    int64 batch_id = 1;

}

message GetBatchScoreResponse {

    int32 response_code = 1;
    optional double score = 2;

    /*

    0 - Success
    1 - Batch not found

    */

}

message GetBatchUsersReviewRequest {

    int64 batch_id = 1;

}

message GetBatchUsersReviewResponse {

    int32 response_code = 1;
    optional int64 n_users_review = 2;

    /*

    0 - Success
    1 - Batch not found

    */

}

message GetBatchesResponse {

    int32 response_code = 1;
    repeated BatchDetails batches = 2;

    /*

    0 - Success
    1 - SQL Error

    */

}

message Empty {

}

service InventoryRepository {
    rpc getBatch (GetBatchRequest) returns (GetBatchResponse);
    rpc getBatches (Empty) returns (GetBatchesResponse);
    rpc getBatchScore (GetBatchScoreRequest) returns (GetBatchScoreResponse);
    rpc getBatchCost (GetBatchCostRequest) returns (GetBatchCostResponse);
    rpc getBatchUsersReview (GetBatchUsersReviewRequest) returns (GetBatchUsersReviewResponse);
}