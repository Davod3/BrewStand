syntax = "proto3";

import "google/protobuf/timestamp.proto";

// Data structure for storing order details

message OrderRepo {
    string user_id = 1;
    repeated ItemRepo items = 2;
    google.protobuf.Timestamp shipDate = 3;
    string status = 4;
    bool complete = 5;
    string destinationAddress = 6;
}

// Data structure for storing item details

message ItemRepo {
    int64 itemID = 1;
    double volume = 2;
}

// Messages

message InsertOrderRequest {
    string user_id = 1;
    repeated ItemRepo items = 2;
    string destinationAddress = 3;
}

message InsertOrderResponse {
    int32 response_code = 1;
    optional string order_id = 2;
    /*

    0 - Success
    1 - User not found

    */
}

message GetOrderRequest {
    string order_id = 1;
}

message GetOrderResponse {
    int32 response_code = 1;
    optional OrderRepo order = 2;
    optional string error_msg = 3;

    /*

    0 - Success
    1 - Order not found

    */
}

message GetOrdersRequest {
    string user_id = 1;
}

message GetOrdersResponse {
    int32 response_code = 1;
    repeated OrderRepo orders = 2;

    /*

    0 - Success
    1 - User not found

    */
}

message MarkOrderAsCompleteRequest {
    string order_id = 1;
}

message MarkOrderAsCompleteResponse {
    int32 response_code = 1;

    /*

    0 - Success
    1 - Order not found

    */
}

// Order Repository
service OrderRepository {
    rpc InsertOrder (InsertOrderRequest) returns (InsertOrderResponse);
    // Endpoint to insert a new order in the repository

    rpc GetOrder (GetOrderRequest) returns (GetOrderResponse);
    // Endpoint to get an existing order from the repository

    rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse);
    // Endpoint to get all orders of a specific user from the repository

    rpc MarkOrderAsComplete (MarkOrderAsCompleteRequest) returns (MarkOrderAsCompleteResponse);
    // Marks the current order as completed

}