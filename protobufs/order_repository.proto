syntax = "proto3";

// Data structure for storing order details

message OrderRepo {
    int64 id = 1;
    repeated ItemRepo items = 2;
    string user_id = 3;
    string ship_date = 4;
    string status = 5;
    bool complete = 6;
    string address = 7;    
}

// Data structure for storing item details

message ItemRepo {
    int64 item_id = 1;
    double volume = 2;
}

// Messages

message InsertOrderRequest {
    string user_id = 1;
    repeated ItemRepo items = 2;
    string address = 3;
}

message InsertOrderResponse {
    int32 response_code = 1;
    optional int64 order_id = 2;

    /*

    0 - Success
    1 - User not found

    */
}

message GetOrderRequest {
    int64 order_id = 1;
}

message GetOrderResponse {
    int32 response_code = 1;
    optional OrderRepo order = 2;

    /*

    0 - Success
    1 - Order not found

    */
}

message GetOrdersRequest {
    string user_id = 1;
}

message GetOrdersResponse {
    int32 response_code = 1;
    repeated OrderRepo orders = 2;

    /*

    0 - Success
    1 - User not found

    */
}

message AddItemToOrderRequest {
    int64 order_id = 1;
    ItemRepo item = 2;
}

message AddItemToOrderResponse {
    int32 response_code = 1;

    /*

    0 - Success
    1 - Order not found

    */
}

message RemoveItemFromOrderRequest {
    int64 order_id = 1;
    int64 item_id = 2;
}

message RemoveItemFromOrderResponse {
    int32 response_code = 1;

    /*

    0 - Success
    1 - Order not found
    2 - Item not found in the order

    */
}

message SetAddressForOrderRequest {
    int64 order_id = 1;
    string address = 2;
}

message SetAddressForOrderResponse {
    int32 response_code = 1;

    /*

    0 - Success
    1 - Order not found

    */
}

message MarkOrderAsCompleteRequest {
    int64 order_id = 1;
}

message MarkOrderAsCompleteResponse {
    int32 response_code = 1;

    /*

    0 - Success
    1 - Order not found

    */
}

// Order Repository
service OrderRepository {
    rpc InsertOrder (InsertOrderRequest) returns (InsertOrderResponse);
    // Endpoint to insert  a new order in the repository

    rpc GetOrder (GetOrderRequest) returns (GetOrderResponse);
    // Endpoint to get  an existing order from the repository

    rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse);
    // Endpoint to get  all orders of a specific user from the repository

    rpc AddItemToOrder (AddItemToOrderRequest) returns (AddItemToOrderResponse);
    // Add an item to the current order

    rpc RemoveItemFromOrder (RemoveItemFromOrderRequest) returns (RemoveItemFromOrderResponse);
    // Removes an item from the current order

    rpc SetAddressForOrder (SetAddressForOrderRequest) returns (SetAddressForOrderResponse);
    // Sets the delivery address for the current order

    rpc MarkOrderAsComplete (MarkOrderAsCompleteRequest) returns (MarkOrderAsCompleteResponse);
    // Marks the current order as completed

}