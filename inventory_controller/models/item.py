# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
from utils import util


class Item(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, batch_id: int=None, beer_style: str=None, brew_location: str=None, user_score: float=None, expert_score: float=None, ph_level: float=None, alchool_content: float=None, available_volume: float=None, brew_date: date=None, cost: float=None):  # noqa: E501
        """Item - a model defined in Swagger

        :param batch_id: The batch_id of this Item.  # noqa: E501
        :type batch_id: int
        :param beer_style: The beer_style of this Item.  # noqa: E501
        :type beer_style: str
        :param brew_location: The brew_location of this Item.  # noqa: E501
        :type brew_location: str
        :param user_score: The user_score of this Item.  # noqa: E501
        :type user_score: float
        :param expert_score: The expert_score of this Item.  # noqa: E501
        :type expert_score: float
        :param ph_level: The ph_level of this Item.  # noqa: E501
        :type ph_level: float
        :param alchool_content: The alchool_content of this Item.  # noqa: E501
        :type alchool_content: float
        :param available_volume: The available_volume of this Item.  # noqa: E501
        :type available_volume: float
        :param brew_date: The brew_date of this Item.  # noqa: E501
        :type brew_date: date
        :param cost: The cost of this Item.  # noqa: E501
        :type cost: float
        """
        self.swagger_types = {
            'batch_id': int,
            'beer_style': str,
            'brew_location': str,
            'user_score': float,
            'expert_score': float,
            'ph_level': float,
            'alchool_content': float,
            'available_volume': float,
            'brew_date': date,
            'cost': float
        }

        self.attribute_map = {
            'batch_id': 'batchID',
            'beer_style': 'beerStyle',
            'brew_location': 'brewLocation',
            'user_score': 'userScore',
            'expert_score': 'expertScore',
            'ph_level': 'phLevel',
            'alchool_content': 'alchoolContent',
            'available_volume': 'availableVolume',
            'brew_date': 'brewDate',
            'cost': 'cost'
        }
        self._batch_id = batch_id
        self._beer_style = beer_style
        self._brew_location = brew_location
        self._user_score = user_score
        self._expert_score = expert_score
        self._ph_level = ph_level
        self._alchool_content = alchool_content
        self._available_volume = available_volume
        self._brew_date = brew_date
        self._cost = cost

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_id(self) -> int:
        """Gets the batch_id of this Item.

        A unique identifier assigned to each batch of beer produced.  # noqa: E501

        :return: The batch_id of this Item.
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id: int):
        """Sets the batch_id of this Item.

        A unique identifier assigned to each batch of beer produced.  # noqa: E501

        :param batch_id: The batch_id of this Item.
        :type batch_id: int
        """

        self._batch_id = batch_id

    @property
    def beer_style(self) -> str:
        """Gets the beer_style of this Item.

        The style or type of beer, such as IPA, Stout, Lager, Ale, etc.  # noqa: E501

        :return: The beer_style of this Item.
        :rtype: str
        """
        return self._beer_style

    @beer_style.setter
    def beer_style(self, beer_style: str):
        """Sets the beer_style of this Item.

        The style or type of beer, such as IPA, Stout, Lager, Ale, etc.  # noqa: E501

        :param beer_style: The beer_style of this Item.
        :type beer_style: str
        """

        self._beer_style = beer_style

    @property
    def brew_location(self) -> str:
        """Gets the brew_location of this Item.

        The city where the beer was originally brewed.  # noqa: E501

        :return: The brew_location of this Item.
        :rtype: str
        """
        return self._brew_location

    @brew_location.setter
    def brew_location(self, brew_location: str):
        """Sets the brew_location of this Item.

        The city where the beer was originally brewed.  # noqa: E501

        :param brew_location: The brew_location of this Item.
        :type brew_location: str
        """

        self._brew_location = brew_location

    @property
    def user_score(self) -> float:
        """Gets the user_score of this Item.

        A user defined score for the quality of the beer in the batch, rated out of 10.  # noqa: E501

        :return: The user_score of this Item.
        :rtype: float
        """
        return self._user_score

    @user_score.setter
    def user_score(self, user_score: float):
        """Sets the user_score of this Item.

        A user defined score for the quality of the beer in the batch, rated out of 10.  # noqa: E501

        :param user_score: The user_score of this Item.
        :type user_score: float
        """

        self._user_score = user_score

    @property
    def expert_score(self) -> float:
        """Gets the expert_score of this Item.

        An expert defined score for the quality of the beer in the batch, rated out of 10.  # noqa: E501

        :return: The expert_score of this Item.
        :rtype: float
        """
        return self._expert_score

    @expert_score.setter
    def expert_score(self, expert_score: float):
        """Sets the expert_score of this Item.

        An expert defined score for the quality of the beer in the batch, rated out of 10.  # noqa: E501

        :param expert_score: The expert_score of this Item.
        :type expert_score: float
        """

        self._expert_score = expert_score

    @property
    def ph_level(self) -> float:
        """Gets the ph_level of this Item.

        The pH level of the beer, indicating its acidity or alkalinity.  # noqa: E501

        :return: The ph_level of this Item.
        :rtype: float
        """
        return self._ph_level

    @ph_level.setter
    def ph_level(self, ph_level: float):
        """Sets the ph_level of this Item.

        The pH level of the beer, indicating its acidity or alkalinity.  # noqa: E501

        :param ph_level: The ph_level of this Item.
        :type ph_level: float
        """

        self._ph_level = ph_level

    @property
    def alchool_content(self) -> float:
        """Gets the alchool_content of this Item.

        The percentage of alcohol by volume in the beer.  # noqa: E501

        :return: The alchool_content of this Item.
        :rtype: float
        """
        return self._alchool_content

    @alchool_content.setter
    def alchool_content(self, alchool_content: float):
        """Sets the alchool_content of this Item.

        The percentage of alcohol by volume in the beer.  # noqa: E501

        :param alchool_content: The alchool_content of this Item.
        :type alchool_content: float
        """

        self._alchool_content = alchool_content

    @property
    def available_volume(self) -> float:
        """Gets the available_volume of this Item.

        The volume of beer available in the batch, measured in liters.  # noqa: E501

        :return: The available_volume of this Item.
        :rtype: float
        """
        return self._available_volume

    @available_volume.setter
    def available_volume(self, available_volume: float):
        """Sets the available_volume of this Item.

        The volume of beer available in the batch, measured in liters.  # noqa: E501

        :param available_volume: The available_volume of this Item.
        :type available_volume: float
        """

        self._available_volume = available_volume

    @property
    def brew_date(self) -> date:
        """Gets the brew_date of this Item.

        The date on which the beer batch was brewed.  # noqa: E501

        :return: The brew_date of this Item.
        :rtype: date
        """
        return self._brew_date

    @brew_date.setter
    def brew_date(self, brew_date: date):
        """Sets the brew_date of this Item.

        The date on which the beer batch was brewed.  # noqa: E501

        :param brew_date: The brew_date of this Item.
        :type brew_date: date
        """

        self._brew_date = brew_date

    @property
    def cost(self) -> float:
        """Gets the cost of this Item.

        The price in euros per liter for this batch of beer.  # noqa: E501

        :return: The cost of this Item.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost: float):
        """Sets the cost of this Item.

        The price in euros per liter for this batch of beer.  # noqa: E501

        :param cost: The cost of this Item.
        :type cost: float
        """

        self._cost = cost
